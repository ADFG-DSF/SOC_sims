---
title: "SOC_methods"
author: "Adam Reimer"
format:
  html:
    embed-resources: true
editor: visual
---

```{r include = FALSE}
packs <- c("tidyverse", "ggforce", "RcppRoll", "knitr")
lapply(packs, require, character.only = TRUE)

# source functions
function_files <- list.files(path="..\\functions")
lapply(function_files, function(x) source(paste0("..\\functions\\", x)))

vec_lnalpha <- seq(1, 2, length.out = 3)
vec_sigW <- seq(0.25, 0.75, length.out = 3)
vec_phi <- seq(0, .7, length.out = 3)
beta <- 0.0001
df_power <- data.frame(lnalpha = vec_lnalpha,
                       power = c(0.6, 0.7, 0.8)) #how to pick these. High for SOC sims. Should be lower for OPY sims.
input <- 
  expand.grid(lnalpha = vec_lnalpha, sigW = vec_sigW, phi = vec_phi) %>%
  mutate(beta = beta, 
         Smsy = get_Smsy(lnalpha, beta, TRUE, sigma = sigW, phi = phi),
         lb_eggers = Smsy * 0.8, #Egger bounds
         ub_eggers = Smsy * 1.6) %>%
  rowwise() %>%
  mutate(lb_pctMSY = optimise(get_bounds, #'true' OYP bounds
                              1:Smsy, 
                              lnalpha = lnalpha, 
                              beta = beta,
                              pct_MSY = 0.9,
                              correct = TRUE,
                              sigma = sigW,
                              phi = phi)$minimum,
          ub_pctMSY = optimise(get_bounds, 
                              Smsy:(Smsy*5), 
                              lnalpha = lnalpha, 
                              beta = beta,
                              pct_MSY = 0.7,
                              correct = TRUE,
                              sigma = sigW,
                              phi = phi)$minimum) %>%
  ungroup() %>%
  left_join(df_power, by = "lnalpha")

Chinook_age <- c('3' = 0.1, '4' = 0.2, '5' = 0.3, '6' = 0.38, '7' = 0.02)

input_sims = 5000


# Simulation params -------------------------------------------------------
Ricker_plots <- list()
for(i in 1:length(unique(input$lnalpha))){
Ricker_plots[[i]] <- 
  input %>% 
    slice(rep(1:n(), each = 251)) %>% 
    mutate(S = rep(seq(0, 5 * 1 / max(beta), by = 200), times = nrow(input)),
           R = Ricker(lnalpha = get_lnalpha_p(lnalpha, beta, sigW, phi), beta = beta, S = S),
           Rmsy = Ricker(get_lnalpha_p(lnalpha, beta, sigW, phi), beta, Smsy),
           Smax = 1 / beta,
           Rmax = Ricker(lnalpha = get_lnalpha_p(lnalpha, beta, sigW, phi), beta = beta, S = Smax)) %>%
    ggplot(aes(x = S, y = R)) +
      geom_rect(aes(xmin = lb_pctMSY, xmax = ub_pctMSY, ymin = -Inf, ymax = Inf), fill = "grey95") +
      geom_line() +
      geom_abline(intercept = 0, slope = 1, linetype = 2) +
      geom_point(aes(x = Smax, y = Rmax)) +
      geom_segment(aes(x = Smsy, xend = Smsy, y = Smsy, yend = Rmsy), linetype = 3) +
      theme_bw() +
      facet_grid_paginate(paste0("\u03C6: ", phi) ~ paste0("log(\u03B1): ", lnalpha) + paste0("\u03C3: ", sigW), 
                          #scales = "free_y",
                          ncol = 3, nrow = 3, page = i)
}
```

## Methods

A versatile salmon stock-recruit and fishery simulation model is presented. The goal of this document is to present the model and demonstrate how the model parameters interact to simulate stock and fishery dynamics. Future documents will describe how to use this model to address relevant question posed by the ADF&G escapement goal policy implementation team (EGPIT).

### Stock Recruit Process

Abundance of salmon is generated by a S-R relationship that describes the number of fish expected to return (the "recruitment") from a given number of spawning fish (the "escapement"). The total expected recruitment $R_{c}$ produced from fish spawning in brood year $c$ follows the Ricker formulation:

$$
R_{c}~=~S_{c}\alpha \textrm{exp}(-\beta S_{c})
$$

where $S_{c}$ is the number of spawners, $\alpha$ (number of recruits per spawner in the absence of density dependence) is a measure of productivity, and $\beta$ is a measure of density dependence.

However, productivity varies among brood years, fluctuating around a central tendency. Time-varying productivity often manifests as serially correlated model residuals, so a lognormal error term with a lag of 1 year was included in the linearized form of the S-R relationship to represent realized recruitment.

$$
\textrm{ln}(R_{c})~=~\textrm{ln}(S_{c})+\textrm{ln}(\alpha)-\beta S_{c} +\phi \nu_{(c-1)}+\epsilon_{W}
$$

where $\phi$ is the lag-1 serial correlation coefficient, $\nu_{c}$ are model residuals defined as

$$
\nu_{c}~=~\textrm{ln}(R_{c})-\textrm{ln}(S_{c})-\textrm{ln}(\alpha)+\beta S_{c}
$$

and the $\epsilon_{W}$ are independently and normally distributed process errors with "white noise" variance $\sigma^2_{W}$.

Age at maturity ($p_{ca}$), is needed to distribute recruitment across calendar years and is treated as a constant within each brood year. The abundance $N_{ya}$ of age $a$ salmon in calendar year $y$ is the product of the age at maturity scalar and the total return (recruitment) $R_{c}$ for from brood year $c=yâˆ’a$:

$$
N_{ya}~=~p_{(y-a)a}R_{(y-a)}
$$

Total run $N_{y}$ during calendar year $y$ is the sum of abundance at age across all ages:

$$
N_{y}~=~\sum_{a} N_{ya}
$$

Instantaneous fishing mortality $F_y$ is a function of the annual harvest rate $U_y$ and used to calculate escapement $S_y$:

$$
S_{y}~=~N_ye^{-F_y}
$$

Where $$F_{y}=-\textrm{log}(1-U_y)\textrm{exp}(\epsilon_F)$$ with $\epsilon_{F}~\sim~\textrm{Normal}(0, \sigma^2_{F})$.

### Harvest process

Two different harvest processes were available for use during simulation. The first process mimics standard ADF&G fisheries management, i.e. managers target a harvest rate that will result in an escapement between the lower and upper bounds of the escapement goal range. In this process, the annual harvest rate $U_{y}$, was modeled as a function of the projected total run $N_{y}^{proj.}$, both bounds of the escapement goal $lb$ and $ub$, and the power of the fishery:

$$
U_{y}~=~\textrm{f}(N_y^{proj.},~lb,~ub,~power)
$$

Where $N_y^{proj.}=N_y \textrm{exp}(\epsilon_N)$ with $\epsilon_{N}~\sim~\textrm{Normal}(0, \sigma^2_{N})$. To determine annual harvest rates the following algorithm was used:

$$
U_y^{goal} = \textrm{minimum}(\textrm{Uniform}(U_{ub}, U_{lb}),~power)
$$

where

$$
U_{lb} = \textrm{if}(N_Y^{proj.} > lb)~\frac{N_y^{proj.} - lb}{N_y^{proj.}}~\textrm{else}~0
$$

$$
U_{ub} = \textrm{if}(N_Y^{proj.} > ub)~\frac{N_y^{proj.} - ub}{N_y^{proj.}}~\textrm{else}~0
$$

and $power$ represent the maximum harvest rate the fishery is capable of producing. The lower bound of the escapement goal was the escapement that predicted a mean return which produced 90% of MSY using historical productivity values while the upper bound was was the escapement that predicted a mean return which produced 70% of MSY using historical productivity values.

The second harvest process includes information about whether the stock was currently listed as a management or conservation concern and adjusts the escapement goal range when one of those SOC designations is in effect. In this process, the annual harvest rate $U_{y}$, was modeled as a function of the projected total run $N_{y}^{proj.}$, the SOC designation from the previous year $SOC_{y-1}$, both bounds of the escapement goal $lb$ and $ub$, both bounds of an alternative escapement goal which is managed to during SOC designations $lb_{SOC}$ and $ub_{SOC}$ and the power of the fishery:

$$ 
U_{y}~=~\textrm{f}(N_y^{proj.},~SOC_{y-1},~lb,~ub,~lb_{SOC},~ub_{SOC},~power) 
$$

Where $SOC_{y}$ can take values of "no concern", "yield concern", "management concern", or "conservation concern" and any concern level can be entered into from any other concern level. For the time being, our simulation will designate a stock as a SOC when the concern definition has been met in 4 out of the last 5 years and will will remove a stock as a SOC designation when the concern definition has not been met in 4 out of the last 5 years although these values could be changed if we wanted to test the performance of alternative thresholds of *chronic inability*.

A tabled example of the SOC algorithm output is provided below. For each year (row) the algorithm compares escapement and projected run to the lower bound of the escapement goal and determines if the definition of a yield, management, or conservation concern has been met for that year. SOC designations are made when a criteria is true for one of the SOC types in 4 of the last 5 years, using the defined severity to prioritize designations when more than one SOC type should designated. SOC are delisted when the criteria for that SOC type is false for 4 of the last 5 years.

```{r, echo = FALSE}
#example SOC choices
readRDS(file = "..\\sims\\example_SOC.rds") %>%
  kable(digits = c(0,2,0,0,0,NA,NA,NA,NA),
        col.names = c("Row", "Escapement", "Harvest Rate", "Run", "Run projection", "Goal LB", "Conservation criteria", "Management criteria", "Yield criteria", "SOC designation"),
        format.args = list(big.mark = ','))
```

### Simulated Run Sizes with Historical and Low Productivity

```{r include = FALSE}
sim_base <-    
  mapply(FUN = sim_Ricker,
         lnalpha = input$lnalpha,
         sigW = input$sigW,
         phi = input$phi,
         lb_goal = input$lb_pctMSY,
         ub_goal = input$ub_pctMSY,
         power = input$power,
         MoreArgs = list(beta = beta,
                         age0 = Chinook_age,
                         Sims0 = 200,
                         sigN = 0.2,
                         sigF = 0.2,
                         Hfun = H_goal),
         SIMPLIFY = FALSE) %>%   
  do.call("rbind", .)  

sim_Seq <-    
  mapply(FUN = sim_Ricker,
         lnalpha = input$lb_pctMSY*beta,  #reduced ln_alpha
         sigW = input$sigW,
         phi = input$phi,
         lb_goal = input$lb_pctMSY,
         ub_goal = input$ub_pctMSY,
         MoreArgs = list(beta = beta,
                         age0 = Chinook_age,
                         Sims0 = 200,
                         sigN = 0.2,
                         sigF = 0.2,
                         Hfun = H_goal),
         SIMPLIFY = FALSE) %>%   
  lapply(function(x) rename(x, lnalpha_red = lnalpha)) %>%   
  do.call("rbind", .) %>%   
  left_join(input[, c("lnalpha", "lb_pctMSY", "ub_pctMSY")], by = c("lb_goal" = "lb_pctMSY", "ub_goal" = "ub_pctMSY"))   

# * Plot time series -------------------------------------------------------- 
#writing function here since it has dubious use outside of this single application 
plot_ts <- function(dat, lnalpha0){
  df <-
    dat %>%
    select(lnalpha, sigW, phi, sim, lb_goal, ub_goal, S, N) %>%
    filter(lnalpha == lnalpha0) %>%
    pivot_longer(c(S, N), names_to = "stat", values_to = "value")      
  
  limit <- quantile(df$value[df$stat == "N"], .98, na.rm = TRUE)
  
  ggplot(df, aes(x = sim, y = value, color = stat)) +
    geom_line(alpha = 0.4) +
    geom_hline(aes(yintercept = lb_goal), linetype = 2) +
    geom_hline(aes(yintercept = ub_goal), linetype = 2) +
    scale_y_continuous(limits = c(0, limit)) +
    scale_x_continuous(name = "Simulation year") +
    facet_grid(paste0("\u03C6: ", phi) ~ paste0("\u03C3: ", sigW)) } 
```

Examining a time series of simulation results can help us gain an intuitive sense of the model. Two sets of simulations were run with 27 parameter combinations $\textrm{log}(\alpha) = (1.0, 1.5, 2.0)$, $\sigma = (0.25, 0.50, 0.75)$, and $\phi = (0.00, 0.35, 0.70)$. $\beta=0.0001$ and $p_a=(0.10, 0.20, 0.30, 0.38, 0.02)$ were used for all simulations while lower bound of the escapement goal was the escapement that predicted a mean return which produced 90% of MSY while the upper bound was was the escapement that predicted a mean return which produced 70% of MSY. Power varied according to the productivity of the stock and was set to $0.6$, $0.7$, or $0.8$ when historical $\textrm{log}(\alpha)$ was set to $1.0$, $1.5$ and $2.0$ respectively. Management variability was set to 0.2 for both observation ($\sigma_N$) and implementation ($\sigma_F$) error. The first simulation was exactly as described above while the second simulation was identical except that it reflected a low productivity situation where $\textrm{log}(\alpha)^*=\frac{lb}{\beta}$.

Because of the color scheme used (pink for total run and teal for escapement) grey areas represent simulations when there was no harvestable surplus. Notice that with modest process error ($\sigma=0.25$) and autocorrelation ($\phi=0$) the fishery is predictable and result in a consistent harvestable surplus under historical productivity (@fig-baseSeq1-1). As process error increases we see more variability in total run including instances of very large runs for which the fishery had insufficient fishing power to maintain escapements within the goal range and instances of smaller runs for which little or no harvestable surplus was available. Autocorrelation also increases variability in total run (resulting in similar patterns) as well as making large or small run sizes more persistent. Looking across these 3 panels we see similar patterns for larger values of log($\alpha$) (see @fig-baseSeq2-1 & @fig-baseSeq3-1) although larger values result in larger run sizes and more harvestable surplus.

Comparison of historical and low productivity regimes across a wide variety of parameter combination show how the low productivity regime we are assuming results in negligible harvestable surplus and poor performance with respect to achieving the lower bound of the escapement goal range (see @fig-baseSeq1-2, @fig-baseSeq2-2 & @fig-baseSeq3-2).

```{r echo = FALSE, warning = FALSE}
#| label: fig-baseSeq1 
#| fig.height: 8 
#| fig.width: 8 
#| fig.cap: "Simulated total run and escapements for 9 possible stock recruit parameter combinations under historical and low productivity regimes when historical productivity was log(\u03B1) = 1.0. The y-axis scale differs between the top and bottom panel." 
#| layout-nrow: 3 
#| fig-subcap:  
#|   - "Historical productivity: log(\u03B1) = 1.0" 
#|   - "Low productivity: log(\u03B1) = lb / \u03B2" 

plot_ts(sim_base, 1)
plot_ts(sim_Seq, 1)
```

```{r echo = FALSE, warning = FALSE}
#| label: fig-baseSeq2 
#| fig.height: 8
#| fig.width: 8 
#| fig.cap: "Simulated total run and escapements for 9 possible stock recruit parameter combinations under historical and low productivity regimes when historical productivity was log(\u03B1) = 1.5. The y-axis scale differs between the top and bottom panel."
#| layout-nrow: 3 
#| fig-subcap:  
#|   - "Historical productivity: log(\u03B1) = 1.5" 
#|   - "Low productivity: log(\u03B1) = lb / \u03B2" 

plot_ts(sim_base, 1.5) 
plot_ts(sim_Seq, 1.5)
```

```{r echo = FALSE, warning = FALSE}
#| label: fig-baseSeq3
#| fig.height: 8 
#| fig.width: 8 
#| fig.cap: "Simulated total run and escapements for 9 possible stock recruit parameter combinations under historical and low productivity regimes when historical productivity was log(\u03B1) = 2.0. The y-axis scale differs between the top and bottom panel." 
#| layout-nrow: 3 
#| fig-subcap:  
#|   - "Historical productivity: log(\u03B1) = 2.0" 
#|   - "Low productivity: log(\u03B1) = lb / \u03B2" 

plot_ts(sim_base, 2) 
plot_ts(sim_Seq, 2)
```

#### Management Variability

Note that the simulations above were run estimation error and implementation error both set to $0.2$ ($\sigma_N=\sigma_F=0.2$) which were arbitrarily set but may be reasonable approximations. This section is not necessary reading but might help fine tune these or future simulations once reviewed by more competent staff.

##### Estimation Error

Estimation error refers to variability in our estimation of total run size and can be thought of as the CV of the inseason run size estimate. Increasing estimation error (shown below for $\textrm{log}(\alpha) = 1.5$) primarily increases the likelihood of over-escapement. Simulations at values of $\sigma_N$ between $0$ and $0.3$ confirm that when $\sigma_N$ is varied between $0$ and $0.3$ we see negligible effects on the percentage of under-escapements with the escapement goal algorithm described above. For over-escapements generally less than 10% of the simulated runs were over the upper bound of the escapement goal when $\sigma_N=0.15$ while less than 15% of the simulated runs were over the upper bound of the escapement goal when $\sigma_N=0.3$. Notice that perfect observation (i.e. $\sigma_N=0$) results in near perfect management at low values of $\sigma$ or $\phi$. All of these patterns are positively correlated with productivity although most are overridden by variability in the SR relationship at high levels of $\sigma$ or $\phi$.

```{r include = FALSE}
#demonstrate behavior of sigN and sigF
sim_base0 <- 
  mapply(FUN = sim_Ricker,
         lnalpha = input$lnalpha,
         sigW = input$sigW,
         phi = input$phi,
         lb_goal = input$lb_pctMSY,
         ub_goal = input$ub_pctMSY,
         power = input$power,
         MoreArgs = list(beta = beta,
                         age0 = Chinook_age,
                         Sims0 = 1500,
                         sigN = 0,
                         sigF = 0,
                         Hfun = H_goal),
         SIMPLIFY = FALSE) %>%
  do.call("rbind", .)

sim_baseF15 <- 
  mapply(FUN = sim_Ricker,
         lnalpha = input$lnalpha,
         sigW = input$sigW,
         phi = input$phi,
         lb_goal = input$lb_pctMSY,
         ub_goal = input$ub_pctMSY,
         power = input$power,
         MoreArgs = list(beta = beta,
                         age0 = Chinook_age,
                         Sims0 = 1500,
                         sigN = 0,
                         sigF = 0.15,
                         Hfun = H_goal),
         SIMPLIFY = FALSE) %>%
  do.call("rbind", .)

sim_baseF3 <- 
  mapply(FUN = sim_Ricker,
         lnalpha = input$lnalpha,
         sigW = input$sigW,
         phi = input$phi,
         lb_goal = input$lb_pctMSY,
         ub_goal = input$ub_pctMSY,
         power = input$power,
         MoreArgs = list(beta = beta,
                         age0 = Chinook_age,
                         Sims0 = 1500,
                         sigN = 0,
                         sigF = 0.3,
                         Hfun = H_goal),
         SIMPLIFY = FALSE) %>%
  do.call("rbind", .)

sim_baseN15 <- 
  mapply(FUN = sim_Ricker,
         lnalpha = input$lnalpha,
         sigW = input$sigW,
         phi = input$phi,
         lb_goal = input$lb_pctMSY,
         ub_goal = input$ub_pctMSY,
         power = input$power,
         MoreArgs = list(beta = beta,
                         age0 = Chinook_age,
                         Sims0 = 1500,
                         sigN = 0.15,
                         sigF = 0,
                         Hfun = H_goal),
         SIMPLIFY = FALSE) %>%
  do.call("rbind", .)

sim_baseN3 <- 
  mapply(FUN = sim_Ricker,
         lnalpha = input$lnalpha,
         sigW = input$sigW,
         phi = input$phi,
         lb_goal = input$lb_pctMSY,
         ub_goal = input$ub_pctMSY,
         power = input$power,
         MoreArgs = list(beta = beta,
                         age0 = Chinook_age,
                         Sims0 = 1500,
                         sigN = 0.30,
                         sigF = 0,
                         Hfun = H_goal),
         SIMPLIFY = FALSE) %>%
  do.call("rbind", .)

sim_baseF15N15 <- 
  mapply(FUN = sim_Ricker,
         lnalpha = input$lnalpha,
         sigW = input$sigW,
         phi = input$phi,
         lb_goal = input$lb_pctMSY,
         ub_goal = input$ub_pctMSY,
         power = input$power,
         MoreArgs = list(beta = beta,
                         age0 = Chinook_age,
                         Sims0 = 1500,
                         sigN = 0.15,
                         sigF = 0.15,
                         Hfun = H_goal),
         SIMPLIFY = FALSE) %>%
  do.call("rbind", .)

sim_baseF3N3 <- 
  mapply(FUN = sim_Ricker,
         lnalpha = input$lnalpha,
         sigW = input$sigW,
         phi = input$phi,
         lb_goal = input$lb_pctMSY,
         ub_goal = input$ub_pctMSY,
         power = input$power,
         MoreArgs = list(beta = beta,
                         age0 = Chinook_age,
                         Sims0 = 1500,
                         sigN = 0.3,
                         sigF = 0.3,
                         Hfun = H_goal),
         SIMPLIFY = FALSE) %>%
  do.call("rbind", .)

temp <-
  rbind(sim_base0, sim_baseF15) %>%
  rbind(sim_baseN15) %>%
  rbind(sim_baseN3) %>%
  rbind(sim_baseF3) %>%
  rbind(sim_baseF15N15) %>%
  rbind(sim_baseF3N3) %>%
  group_by(lnalpha, sigW, phi, sigN, sigF) %>%
  # mutate(eg_range = ifelse(S < lb_goal, "under", 
  #                          ifelse(S > ub_goal, "over", "within")))
  summarize(under = mean(S < lb_goal),
            over = mean(S > ub_goal),
            within = mean(S >= lb_goal & S <= ub_goal)) %>%
  pivot_longer(cols = c(under, over, within),
               names_to = "eg_range",
               values_to = "pct")
```

```{r echo = FALSE, warning = FALSE}
#| label: fig-sigmaN
#| fig.height: 7
#| fig.width: 8
#| fig.cap: "Simulated percentage of under- and over-escapements for 27 possible stock-recruit parameter combinations each with 3 possible values of observation error while implementation error is set to 0."
#| layout-nrow: 2
#| fig-subcap: 
#|   - "Under-escapement"
#|   - "Over-escapement"
temp %>%
  filter(sigN %in% c(0, 0.15, 0.3) & sigF == 0) %>%
  filter(eg_range == "under") %>%
  ggplot(aes(x = as.character(sigN), y = pct, group = lnalpha, fill = as.character(lnalpha)))  +
  geom_bar(stat = "identity", position = "dodge") +
  labs(fill = "log(\u03B1)", y = "Percentage") +
  xlab(~ sigma[N]) +
  facet_grid(paste0("\u03C6: ", phi) ~ paste0("\u03C3: ", sigW))

temp %>%
  filter(sigN %in% c(0, 0.15, 0.3) & sigF == 0) %>%
  filter(eg_range == "over") %>%
  ggplot(aes(x = as.character(sigN), y = pct, group = lnalpha, fill = as.character(lnalpha))) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(fill = "log(\u03B1)", y = "Percentage") +
  xlab(~ sigma[N]) +
  facet_grid(paste0("\u03C6: ", phi) ~ paste0("\u03C3: ", sigW))
```

##### Implementation error

Implementation error refers to the ability of our fishery managers to achieve the harvest rate they were trying to achieve. There are a lot of factors that go into missed goals (when the fish are there) and distilling that down to one number is going to be difficult. For example, the harvest model described above implies mangers are aiming for any point within the escapement goal range with equal probability but changing this to a different management strategy would effect the results below drastically. That said, increasing implementation error increases the likelihood of both under- and over-escapement (shown below for $\textrm{log}(\alpha) = 1.5$) . Simulations at values of $\sigma_F$ between $0$ and $0.3$ can quantify increases in the percentage of simulated years with both over and under escapements. In general, less than 5% of the simulated runs missed the lower bound of the escapement goal when $\sigma_F=0.15$ while less than 10% of the simulated runs missed the lower bound of the escapement goal when $\sigma_F=0.3$. Notice that perfect management (i.e. $\sigma_F=0$) is simulated at low values of $\sigma$ or $\phi$. All of these patterns are positively correlated with productivity although most are overridden by variability in the SR relationship at high levels of $\sigma$ or $\phi$. Similar patterns occurred for over-escapement.

```{r echo = FALSE, warning = FALSE}
#| label: fig-sigmaF
#| fig.height: 7
#| fig.width: 8
#| fig.cap: "Simulated percentage of under- and over-escapements for 27 possible stock-recruit parameter combinations each with 3 possible values of implementation error when observation error was set to 0."
#| layout-nrow: 2
#| fig-subcap: 
#|   - "Under-escapement"
#|   - "Over-escapement"
temp %>%
  filter(sigF %in% c(0, 0.15, 0.3) & sigN == 0) %>%
  filter(eg_range == "under") %>%
  ggplot(aes(x = as.character(sigF), y = pct, group = lnalpha, fill = as.character(lnalpha))) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(fill = "log(\u03B1)", y = "Percentage") +
  xlab(~ sigma[F]) +
  facet_grid(paste0("\u03C6: ", phi) ~ paste0("\u03C3: ", sigW))

temp %>%
  filter(sigF %in% c(0, 0.15, 0.3) & sigN == 0) %>%
  filter(eg_range == "over") %>%
  ggplot(aes(x = as.character(sigF), y = pct, group = lnalpha, fill = as.character(lnalpha)))  +
  geom_bar(stat = "identity", position = "dodge") +
    labs(fill = "log(\u03B1)", y = "Percentage") +
  xlab(~ sigma[F]) +
  facet_grid(paste0("\u03C6: ", phi) ~ paste0("\u03C3: ", sigW))
```

##### Observation and Implementation Error

Finally, it might be worth noting that combinations of implementation and observation error do not result in additive probabilities of under- or over-escapement.

```{r echo = FALSE, warning = FALSE}
#| label: fig-sigmaFN
#| fig.height: 7
#| fig.width: 8
#| fig.cap: "Simulated percentage of under- and over-escapements for 27 possible stock-recruit parameter combinations when observation error and implementation error covary over 3 possible values."
#| layout-nrow: 2
#| fig-subcap: 
#|   - "Under-escapement"
#|   - "Over-escapement"
temp %>%
  filter(sigN == sigF) %>%
  filter(eg_range == "under") %>%
  ggplot(aes(x = as.character(sigN), y = pct, group = lnalpha, fill = as.character(lnalpha)))  +
  geom_bar(stat = "identity", position = "dodge") +
  labs(fill = "log(\u03B1)", y = "Percentage") +
  xlab(~ paste(sigma[F], " = ", sigma[N])) +
  facet_grid(paste0("\u03C6: ", phi) ~ paste0("\u03C3: ", sigW))

temp %>%
  filter(sigN == sigF) %>%
  filter(eg_range == "over") %>%
  ggplot(aes(x = as.character(sigN), y = pct, group = lnalpha, fill = as.character(lnalpha))) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(fill = "log(\u03B1)", y = "Percentage") +
  xlab(~ paste(sigma[F], " = ", sigma[N])) +
  facet_grid(paste0("\u03C6: ", phi) ~ paste0("\u03C3: ", sigW))
```
